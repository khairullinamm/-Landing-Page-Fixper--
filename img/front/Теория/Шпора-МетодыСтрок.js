//------ СТРОКИ -----
let s = "Hello, World";

//получение порций строки

s.substring(1,4); //"ell" - получает 1,2,3 индексы, 4 - не включает, если не указать последний индекс - то будет до конца строки
s.slice(1,4); //аналогично
s.slice(-3); //"rld" - получает последние 3 символа
s.substring(-3); //вернем все слово, так как не поддерживает отрицательные числа и считает их за 0
s.split(","); //["Hello","world"] разбивает по разделителю

//поиск строки

s.indexOf("l"); // => 2 -- индекс первой буквы l 
s.indexOf("l", 3); // => 3 -- позиция первой буквы l начиная с 3-ей позиции
s.indexOf("zz"); // => -1 -- так как s не включает zz
s.lastIndexOf("l"); // => 10 -- позиция последней буквы l

//булевские функции поиска в ES6 и последующих версиях
s.startsWith("Hell"); // => true -- строка начинается с этого
s.endsWith("!"); // => false -- строка не оканчивается этим
s.includes("or"); // => or -- true так как s включает 

//создание модифицированной версии строки
s.replace("llo","ya"); // => "Heya, world"
s.toLowerCase(); // => "hello, world"
s.toUpperCase(); // => "HELLO, WORLD"
s.normalize(); // нормализация Unicode NFC (Normalization From C)
s.normalize("NFD"); // нормализация Unicode NFD (Normalization Form D), также есть NFKC и NFKD

//Инспектирование индивидуальных (16-битных) символов строки
s.charAt(0); // => "H" -- первый символ
s.charAt(s.length - 1); // => "d" -- последний символ
s.charCodeAt(0);  // => 72 -- 16-битное число в указанной позиции
s.codePointAt(0); // => 72 -- работает с кодовыми точками > 16 бит 

//функции дополнения строк es2017
"x".padStart(3); // => "  x" -- добавляет пробелы слева до длины три
"x".padEnd(3); // => "x  " -- добавляте пробелы справа до длины 3
"x".padStart(3,"*"); // => "**x" -- добавляет звездочки слева до длины 3
"x".padEnd(3,"-"); // => "x--" -- добавляет дефисы справа до длины 3

//функции усечения пробелов. trim() введена в ES5; остальные в ES2019
" test ".trim(); // => "test" -- удаляет пробелы слева и справа
" test ".trimStart(); // => "test " -- удаляет пробелы слева
" test ".trimEnd(); // => " test" -- удаляет пробелы справа

//смешанные методы строк
s.concat("!"); // => "Hello, world !" -- взамен просто используется +
"<>".repeat(5); // => "<><><><><>" выполняет конкатенацию n копий



// --- ШАБЛОННЫЕ ЛИТЕРАЛЫ ---
let name = "Bill";
let greeting = `Hello ${name}`; // ==> Hello Bill

//теговые шаблонные литералы
